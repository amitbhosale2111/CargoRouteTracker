<!-- Chatbot Interface -->
<div id="chatbot-container" class="position-fixed bottom-0 end-0 mb-4 me-4" style="z-index: 1050;">
    <!-- Chatbot Toggle Button -->
    <div id="chatbot-toggle" class="btn btn-primary rounded-circle shadow-lg" style="width: 60px; height: 60px; display: flex; align-items: center; justify-content: center;">
        <i class="fas fa-robot fa-lg"></i>
    </div>

    <!-- Chatbot Window -->
    <div id="chatbot-window" class="card shadow-lg" style="width: 350px; height: 500px; display: none; position: absolute; bottom: 70px; right: 0;">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h6 class="mb-0">
                <i class="fas fa-robot me-2"></i>Cargo Assistant
            </h6>
            <button id="chatbot-close" class="btn btn-sm btn-outline-light">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <div class="card-body p-0 d-flex flex-column">
            <!-- Chat Messages Area -->
            <div id="chat-messages" class="flex-grow-1 p-3" style="height: 400px; overflow-y: auto;">
                <div class="text-center text-muted">
                    <i class="fas fa-robot fa-2x mb-2"></i>
                    <p>Hello! I'm your cargo delivery assistant. How can I help you today?</p>
                </div>
            </div>
            
            <!-- Quick Actions -->
            <div class="border-top p-2">
                <div class="d-flex flex-wrap gap-1">
                    <button class="btn btn-sm btn-outline-primary quick-action" data-action="track">Track Delivery</button>
                    <button class="btn btn-sm btn-outline-primary quick-action" data-action="vehicle">Vehicle Status</button>
                    <button class="btn btn-sm btn-outline-primary quick-action" data-action="alerts">Check Alerts</button>
                    <button class="btn btn-sm btn-outline-primary quick-action" data-action="help">Help</button>
                </div>
            </div>
            
            <!-- Message Input -->
            <div class="border-top p-2">
                <div class="input-group">
                    <input type="text" id="chat-input" class="form-control" placeholder="Type your message..." maxlength="500">
                    <button id="chat-send" class="btn btn-primary">
                        <i class="fas fa-paper-plane"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
let chatSessionId = null;
let isTyping = false;

// Initialize chatbot
document.addEventListener('DOMContentLoaded', function() {
    chatSessionId = localStorage.getItem('chatSessionId') || generateSessionId();
    localStorage.setItem('chatSessionId', chatSessionId);
    
    // Toggle chatbot window
    document.getElementById('chatbot-toggle').addEventListener('click', function() {
        const window = document.getElementById('chatbot-window');
        window.style.display = window.style.display === 'none' ? 'block' : 'none';
    });
    
    // Close chatbot window
    document.getElementById('chatbot-close').addEventListener('click', function() {
        document.getElementById('chatbot-window').style.display = 'none';
    });
    
    // Send message on Enter key
    document.getElementById('chat-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter' && !isTyping) {
            sendMessage();
        }
    });
    
    // Send message on button click
    document.getElementById('chat-send').addEventListener('click', function() {
        if (!isTyping) {
            sendMessage();
        }
    });
    
    // Quick action buttons
    document.querySelectorAll('.quick-action').forEach(button => {
        button.addEventListener('click', function() {
            const action = this.dataset.action;
            let message = '';
            
            switch(action) {
                case 'track':
                    message = 'Track delivery TRK123456789';
                    break;
                case 'vehicle':
                    message = 'Where is vehicle TRK-001?';
                    break;
                case 'alerts':
                    message = 'Any alerts today?';
                    break;
                case 'help':
                    message = 'What can you do?';
                    break;
            }
            
            if (message) {
                document.getElementById('chat-input').value = message;
                sendMessage();
            }
        });
    });
});

function generateSessionId() {
    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (!message || isTyping) return;
    
    // Add user message to chat
    addMessage(message, 'user');
    input.value = '';
    
    // Show typing indicator
    showTypingIndicator();
    
    // Send message to API
    fetch('/api/chatbot/send', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            message: message,
            sessionId: chatSessionId
        })
    })
    .then(response => response.json())
    .then(data => {
        hideTypingIndicator();
        addMessage(data.botMessage, 'bot');
    })
    .catch(error => {
        hideTypingIndicator();
        addMessage('Sorry, I encountered an error. Please try again.', 'bot');
        console.error('Error:', error);
    });
}

function addMessage(message, sender) {
    const messagesContainer = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `mb-3 ${sender === 'user' ? 'text-end' : ''}`;
    
    const messageBubble = document.createElement('div');
    messageBubble.className = `d-inline-block p-2 rounded ${sender === 'user' ? 'bg-primary text-white' : 'bg-light'}`;
    messageBubble.style.maxWidth = '80%';
    messageBubble.style.wordWrap = 'break-word';
    
    // Convert markdown-like formatting to HTML
    const formattedMessage = message
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>')
        .replace(/\n/g, '<br>');
    
    messageBubble.innerHTML = formattedMessage;
    messageDiv.appendChild(messageBubble);
    messagesContainer.appendChild(messageDiv);
    
    // Scroll to bottom
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function showTypingIndicator() {
    isTyping = true;
    const messagesContainer = document.getElementById('chat-messages');
    const typingDiv = document.createElement('div');
    typingDiv.id = 'typing-indicator';
    typingDiv.className = 'mb-3';
    typingDiv.innerHTML = `
        <div class="d-inline-block p-2 rounded bg-light">
            <i class="fas fa-ellipsis-h"></i> Typing...
        </div>
    `;
    messagesContainer.appendChild(typingDiv);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

function hideTypingIndicator() {
    isTyping = false;
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// Auto-open chatbot on page load (optional)
// setTimeout(() => {
//     document.getElementById('chatbot-window').style.display = 'block';
// }, 2000);
</script>

<style>
#chatbot-container {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
}

#chat-messages {
    background-color: #f8f9fa;
}

#chat-input:focus {
    border-color: #007bff;
    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
}

.quick-action {
    font-size: 0.8rem;
    padding: 0.25rem 0.5rem;
}

#chatbot-toggle:hover {
    transform: scale(1.1);
    transition: transform 0.2s ease;
}

#chatbot-window {
    border: none;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
}
</style> 